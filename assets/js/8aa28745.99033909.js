"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[854],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),u=s(n),h=o,f=u["".concat(c,".").concat(h)]||u[h]||l[h]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var m={};for(var c in t)hasOwnProperty.call(t,c)&&(m[c]=t[c]);m.originalType=e,m.mdxType="string"==typeof e?e:o,i[1]=m;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>m,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},i="Create Communicators",m={unversionedId:"tutorial-rabbitmq-platform/create-communicator",id:"tutorial-rabbitmq-platform/create-communicator",title:"Create Communicators",description:'In the previous section, we figure out how to write the "pure" pulverized components. In this section, we provide a',source:"@site/docs/tutorial-rabbitmq-platform/create-communicator.md",sourceDirName:"tutorial-rabbitmq-platform",slug:"/tutorial-rabbitmq-platform/create-communicator",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-communicator",draft:!1,editUrl:"https://github.com/nicolasfara/pulverization-framework/tree/master/docsite/docs/tutorial-rabbitmq-platform/create-communicator.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create Pulverized Components",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-components"},next:{title:"Pulverization Configuration",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-configuration"}},c={},s=[],p={toc:s};function l(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-communicators"},"Create Communicators"),(0,o.kt)("p",null,'In the previous section, we figure out how to write the "pure" pulverized components. In this section, we provide a\nguide on how to bind the previously defined components with the corresponding platform-specific communicator, in this\ncase, ',(0,o.kt)("strong",{parentName:"p"},"RabbitMQ"),".",(0,o.kt)("br",{parentName:"p"}),"\n","Importing the ",(0,o.kt)("inlineCode",{parentName:"p"},"it.nicolasfarabegoli.pulverization-framework:rabbitmq-platform:<version>")," module, the following class are\navailable to enable inter-component communication:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SimpleRabbitmqSenderCommunicator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SimpleRabbitmqReceiverCommunicator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SimpleRabbitmqBidirectionalCommunicator"))),(0,o.kt)("p",null,"The first one enables the communication between two components $A \\rightarrow B$ where $A$ sends messages to $B$.",(0,o.kt)("br",{parentName:"p"}),"\n","The second component enables the communication between two components $A \\leftarrow B$ where $B$ sends messages to\n$A$.",(0,o.kt)("br",{parentName:"p"}),"\n","The last components combine the functionality of the first two communicators to achieve a bi-directional communication\nbetween $A \\leftrightarrow B$."),(0,o.kt)("p",null,"All three communicators manage internally all the ",(0,o.kt)("strong",{parentName:"p"},"RabbitMQ"),"-specific stuff to provide a simple and clean API\nfor the user. The only thing that the user should specify is the type of communication which specify from which\ncomponent the communication occurs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"SimpleRabbitmqReceiverCommunicator<AllSensorsPayload>(SensorsComponent to BehaviourComponent)\n")),(0,o.kt)("p",null,"The code above shows how to create a receiver communicator. The type parameter determines the type of message the\ntwo components share. In the example, we create a receiver that receives messages from the ",(0,o.kt)("inlineCode",{parentName:"p"},"SensorsComponent")," to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"BehaviourComponent"),". The pair passed to the constructor follows the semantic ",(0,o.kt)("em",{parentName:"p"},"upstream/downstream"),"."),(0,o.kt)("p",null,"The sender communicator is identical and also in this case the semantics of the pair passed to the constructor follow\nthe semantic of ",(0,o.kt)("em",{parentName:"p"},"upstream/downstream"),"."),(0,o.kt)("p",null,"In the bidirectional communicator, the semantic of the pair is slightly different: the semantic assumed is again ",(0,o.kt)("em",{parentName:"p"},"\nupstream/downstream")," but in this case from the sender's perspective."),(0,o.kt)("p",null,"For example, if we create the following communicator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"SimpleRabbitmqBidirectionalCommunicator<String>(SensorsComponent to BehaviourComponent)\n")),(0,o.kt)("p",null,"we say that we want a bidirectional communication between the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sensors")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Behaviour")," components where who will use\nthe class take the part of the sensor.\nSo we can express the communication like",(0,o.kt)("br",{parentName:"p"}),"\n","$Sensors \\xrightarrow{\\text{send}} Behaviour$ and",(0,o.kt)("br",{parentName:"p"}),"\n","$Sensor \\xleftarrow{\\text{receive}} Behaviour$."),(0,o.kt)("p",null,"The semantic change if we create the same communicator bu with the pair inverted"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"SimpleRabbitmqBidirectionalCommunicator<String, String>(BehaviourComponent to SensorsComponent)\n")),(0,o.kt)("p",null,"in this case the communication is",(0,o.kt)("br",{parentName:"p"}),"\n","$Behaviour \\xrightarrow{\\text{send}} Sensors$ and",(0,o.kt)("br",{parentName:"p"}),"\n","$Behaviour \\xleftarrow{\\text{receive}} Sensor$."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Please, pay attention when specify the communication type.")))}l.isMDXComponent=!0}}]);