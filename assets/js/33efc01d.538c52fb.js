"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[7625],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(r),f=o,d=s["".concat(l,".").concat(f)]||s[f]||m[f]||i;return r?n.createElement(d,a(a({ref:t},u),{},{components:r})):n.createElement(d,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=s;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},1643:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:3},a="Pulverization Configuration",c={unversionedId:"tutorial-rabbitmq-platform/create-configuration",id:"tutorial-rabbitmq-platform/create-configuration",title:"Pulverization Configuration",description:"The pulverization framework gives a DSL to configure and declare all the LogicalDevice in the system and how they are",source:"@site/docs/tutorial-rabbitmq-platform/create-configuration.md",sourceDirName:"tutorial-rabbitmq-platform",slug:"/tutorial-rabbitmq-platform/create-configuration",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-configuration",draft:!1,editUrl:"https://github.com/nicolasfara/pulverization-framework/tree/master/docsite/docs/tutorial-rabbitmq-platform/create-configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Create Communicators",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-communicator"},next:{title:"Create Device Component",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-device-component"}},l={},p=[],u={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pulverization-configuration"},"Pulverization Configuration"),(0,o.kt)("p",null,"The pulverization framework gives a DSL to configure and declare all the ",(0,o.kt)("inlineCode",{parentName:"p"},"LogicalDevice")," in the system and how they are\ncomposed.\nMoreover, based on the platform imported into the project, the DSL is enriched with platform-specific parameters.\nWith this example, we show how to build a configuration for the ",(0,o.kt)("inlineCode",{parentName:"p"},"rabbitmq-platform"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val configuration = pulverizationConfig {\n  logicalDevice("device") {\n    component(DeviceBehaviour())\n    component(DeviceCommunication())\n    component(DeviceSensorsContainer())\n    component(DeviceState())\n  }\n  rabbitmq {\n    setHostname(System.getenv("RABBITMQ_HOST") ?: "rabbitmq")\n  }\n}\n')),(0,o.kt)("p",null,"The DSL gives the entry point ",(0,o.kt)("inlineCode",{parentName:"p"},"pulverizedConfig")," which gives you the ability to configure as many ",(0,o.kt)("inlineCode",{parentName:"p"},"LogicalDevice")," types\nas you need in the system (in our example, only one device is specified). Moreover, the DSL gives you the possibility to\nconfigure the parameters of the ",(0,o.kt)("strong",{parentName:"p"},"RabbitMQ")," MOM that is used by the pulverization framework to run the system.\nThe RabbitMQ parameters can be configured via the ",(0,o.kt)("inlineCode",{parentName:"p"},"rabbitmq")," scope."),(0,o.kt)("p",null,"When configuring a ",(0,o.kt)("inlineCode",{parentName:"p"},"LogicalDevice"),', you must give a "canonical name" to that specific configuration of a device.\nInside the scope ',(0,o.kt)("inlineCode",{parentName:"p"},"logicalDevice")," you can configure the specific components belonging to that logical device."))}m.isMDXComponent=!0}}]);