"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[4624],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),f=i,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3},a="Pulverization Configuration",c={unversionedId:"tutorial-basics/create-configuration",id:"tutorial-basics/create-configuration",title:"Pulverization Configuration",description:"The pulverization framework gives a DSL to configure and declare all the LogicalDevice in the system and how they are",source:"@site/docs/tutorial-basics/create-configuration.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-configuration",permalink:"/pulverization-framework/docs/tutorial-basics/create-configuration",draft:!1,editUrl:"https://github.com/nicolasfara/pulverization-framework/tree/master/docsite/docs/tutorial-basics/create-configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Create Communicators",permalink:"/pulverization-framework/docs/tutorial-basics/create-communicator"},next:{title:"Create Device Component",permalink:"/pulverization-framework/docs/tutorial-basics/create-device-component"}},l={},s=[],p={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pulverization-configuration"},"Pulverization Configuration"),(0,i.kt)("p",null,"The pulverization framework gives a DSL to configure and declare all the ",(0,i.kt)("inlineCode",{parentName:"p"},"LogicalDevice")," in the system and how they are\ncomposed.\nMoreover, based on the platform imported in the project, the DSL is enriched with platform-specific parameters.\nIn this example we show how to build a configuration for the ",(0,i.kt)("inlineCode",{parentName:"p"},"rabbitmq-platform"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val configuration = pulverizationConfig {\n  logicalDevice("device") {\n    component(DeviceBehaviour())\n    component(DeviceCommunication())\n    component(DeviceSensorsContainer())\n    component(DeviceState())\n  }\n  rabbitmq {\n    setHostname(System.getenv("RABBITMQ_HOST") ?: "rabbitmq")\n  }\n}\n')),(0,i.kt)("p",null,"The DSL give the entrypoint ",(0,i.kt)("inlineCode",{parentName:"p"},"pulverizedConfig")," which gives you the ability to configure as many ",(0,i.kt)("inlineCode",{parentName:"p"},"LogicalDevice")," types\nyou need in the system (in our example only one device is specified). Moreover, the DSL give you the possibility to\nconfigure the parameters of the ",(0,i.kt)("strong",{parentName:"p"},"RabbitMQ")," MOM which is used by the pulverization framework to run the system.\nThe RabbitMQ parameters can be configured via the ",(0,i.kt)("inlineCode",{parentName:"p"},"rabbitmq")," scope."),(0,i.kt)("p",null,"When configuring a ",(0,i.kt)("inlineCode",{parentName:"p"},"LogicalDevice"),', you must give a "canonical name" to that specific configuration of device.\nInside the scope ',(0,i.kt)("inlineCode",{parentName:"p"},"logicalDevice")," you can configure the specific components belonging to that logical device."))}u.isMDXComponent=!0}}]);