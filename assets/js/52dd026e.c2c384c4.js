"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[4649],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,d=u["".concat(p,".").concat(f)]||u[f]||s[f]||a;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},56544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:4},i="Deployment",l={unversionedId:"tutorial-rabbitmq-platform/deployment",id:"tutorial-rabbitmq-platform/deployment",title:"Deployment",description:"At this point, all the components and their corresponding logics are defined. The last step is to create an executable",source:"@site/docs/tutorial-rabbitmq-platform/deployment.md",sourceDirName:"tutorial-rabbitmq-platform",slug:"/tutorial-rabbitmq-platform/deployment",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/deployment",draft:!1,editUrl:"https://github.com/nicolasfara/pulverization-framework/tree/master/docsite/docs/tutorial-rabbitmq-platform/deployment.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Pulverization Configuration",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-configuration"}},p={},c=[],m={toc:c};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"At this point, all the components and their corresponding logics are defined. The last step is to create an executable\nfor each ",(0,o.kt)("strong",{parentName:"p"},"deployment unit")," and containerize it to deploy the system."),(0,o.kt)("p",null,"To do that, we create a simple main function in kotlin with the following elements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() = runBlocking {\n  val platform = pulverizationPlatform(config.getDeviceConfiguration("gps")!!) {\n    behaviourLogic(BehaviourComp(), ::gpsBehaviourLogic)\n    // stateLogic(StateComp(), ::stateLogic)\n    withPlatform { RabbitmqCommunicator(hostname = "rabbitmq") }\n    withRemotePlace { defaultRabbitMQRemotePlace() }\n  }\n  val jobs = platform.start()\n  jobs.forEach { it.join() }\n  platform.stop()\n}\n')),(0,o.kt)("p",null,'Now, we use a DSL for setting up the pulverization framework specifying which components need to be "activated" for\nthat specific deployment unit.\nMoreover, the DSL enable the configuration of the ',(0,o.kt)("inlineCode",{parentName:"p"},"Communicator")," which in this example is ",(0,o.kt)("inlineCode",{parentName:"p"},"RabbitmqCommunicator"),".\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"withRemotePlace")," scope we configure the provider of ",(0,o.kt)("inlineCode",{parentName:"p"},"RemotePlace"),": an abstraction of how to reach the other\ncomponents."),(0,o.kt)("p",null,"The DSL returns a platform instance which can be started and stopped. The ",(0,o.kt)("inlineCode",{parentName:"p"},"start")," method returns a set of ",(0,o.kt)("inlineCode",{parentName:"p"},"Job"),"\nreferencing all the components' logic executed. The ",(0,o.kt)("inlineCode",{parentName:"p"},"stop")," method release all the resources allocated by the platform."))}s.isMDXComponent=!0}}]);