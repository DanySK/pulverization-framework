"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[2426],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),u=p(a),h=o,d=u["".concat(i,".").concat(h)]||u[h]||c[h]||r;return a?n.createElement(d,s(s({ref:t},l),{},{components:a})):n.createElement(d,s({ref:t},l))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=u;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m.mdxType="string"==typeof e?e:o,s[1]=m;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6566:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>m,toc:()=>p});var n=a(7462),o=(a(7294),a(3905));const r={sidebar_position:2},s="Components Logic",m={unversionedId:"tutorial-rabbitmq-platform/components-logic",id:"tutorial-rabbitmq-platform/components-logic",title:"Components Logic",description:"Once all the pulverized components are defined, we need to specify the logic of a single component.",source:"@site/docs/tutorial-rabbitmq-platform/components-logic.md",sourceDirName:"tutorial-rabbitmq-platform",slug:"/tutorial-rabbitmq-platform/components-logic",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/components-logic",draft:!1,editUrl:"https://github.com/nicolasfara/pulverization-framework/tree/master/docsite/docs/tutorial-rabbitmq-platform/components-logic.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create Pulverized Components",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-components"},next:{title:"Pulverization Configuration",permalink:"/pulverization-framework/docs/tutorial-rabbitmq-platform/create-configuration"}},i={},p=[{value:"ComponentRef",id:"componentref",level:2}],l={toc:p};function c(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"components-logic"},"Components Logic"),(0,o.kt)("p",null,"Once all the ",(0,o.kt)("em",{parentName:"p"},"pulverized components")," are defined, we need to specify the logic of a single component.\nFor ",(0,o.kt)("strong",{parentName:"p"},"logic")," we intend how the component should behave from his perspective."),(0,o.kt)("p",null,"For example, we want to get the ",(0,o.kt)("em",{parentName:"p"},"GPS")," position every 2 seconds and send the value to the behavior component.\nIn this case, the logic could be the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun mySensorsLogic(sensors: SensorsContainer, behaviour: BehaviourRef<DeviceSensors>) {\n  sensors.get<GpsSensor> {\n    repeat(10) {\n      val payload = DeviceSensors(sense())\n      behaviour.sendToComponent(payload)\n      delay(2.seconds)\n    }\n  }\n}\n")),(0,o.kt)("p",null,"A more complex logic can be found in the behaviour:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'suspend fun gpsBehaviourLogic(\n  behaviour: Behaviour<StateOps, NeighboursMessage, DeviceSensors, NoVal, Unit>,\n  state: StateRef<StateOps>,\n  comm: CommunicationRef<NeighboursMessage>,\n  sensors: SensorsRef<DeviceSensors>,\n  actuators: ActuatorsRef<NoVal>,\n) = coroutineScope {\n  var neighboursComm = listOf<NeighboursMessage>()\n  val jobComm = launch {\n    comm.receiveFromComponent().collect {\n      neighboursComm = neighboursComm.filter { e -> e.device != it.device } + it\n    }\n  }\n  val jobSensor = launch {\n    sensors.receiveFromComponent().collect {\n      state.sendToComponent(Query("query selector")) // This is an example of query: do nothing.\n      when (val lastState = state.receiveFromComponent().first()) {\n        is Distances -> {\n          println("${behaviour.context.deviceID}: ${lastState.distances}")\n          lastState.nearest?.let {\n            println("Device \'${lastState.nearest.first}\' is the nearest (${lastState.nearest.second})")\n          } ?: println("No information about the nearest")\n          val (newState, newComm, _, _) =\n            behaviour(lastState, neighboursComm.filter { e -> e.device != behaviour.context.deviceID }, it)\n          state.sendToComponent(newState)\n          comm.sendToComponent(newComm)\n        }\n\n        is Query -> error("The State should not respond with a query")\n      }\n    }\n  }\n  jobComm.join()\n  jobSensor.join()\n}\n')),(0,o.kt)("p",null,"In oder to define a component logic, a specific method signature must be followed."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"State logic")," ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow"},"\u2192")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," ",(0,o.kt)("inlineCode",{parentName:"li"},"suspend (state: State<StatePayload>, behaviour: BehaviourRef<StatePayload>) -> Unit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Comm logic")," ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow"},"\u2192")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192"))))),(0,o.kt)("br",{parentName:"li"}),(0,o.kt)("inlineCode",{parentName:"li"},"suspend (comm: Communication<CommPayload>, behaviour: BehaviourRef<CommPayload>) -> Unit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Sensors logic")," ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow"},"\u2192")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," ",(0,o.kt)("inlineCode",{parentName:"li"},"suspend (comm: SensorsContainer, behaviour: BehaviourRef<SensorsPayload>) -> Unit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Actuators logic"),(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow"},"\u2192")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," ",(0,o.kt)("inlineCode",{parentName:"li"},"suspend (comm: ActuatorsContainer, behaviour: BehaviourRef<ActuatorsPayload>) -> Unit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Behaviour logic")," ",(0,o.kt)("span",{parentName:"li",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mo",{parentName:"mrow"},"\u2192")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,o.kt)("span",{parentName:"span",className:"mrel"},"\u2192"))))),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"suspend (\n  behaviour: Behaviour<StatePayload, CommPayload, SensorsPayload, ActuatorsPayload, Outcome>,\n  stateRef: StateRef<StatePayload>,\n  commRef: CommunicationRef<CommPayload>,\n  sensorsRef: SensorsRef<SensorsPayload>,\n  actuatorsRef: ActuatorsRef<ActuatorsPayload>,\n) -> Unit\n")))),(0,o.kt)("h2",{id:"componentref"},"ComponentRef"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ComponentRef")," models the concept of reference to another component. The reference could be ",(0,o.kt)("strong",{parentName:"p"},"local"),", ",(0,o.kt)("strong",{parentName:"p"},"remote"),".\nIn the case where a component is not defined in the device, the reference do nothing."),(0,o.kt)("p",null,"This interface enable an intra-component communication abstracting over the place where the component is deployed.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"ComponentRef")," use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Communicator")," as a medium for the communication.",(0,o.kt)("br",{parentName:"p"}),"\n","The concept of ",(0,o.kt)("inlineCode",{parentName:"p"},"Communicator")," is described in the following section."))}c.isMDXComponent=!0}}]);